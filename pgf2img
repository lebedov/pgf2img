#!/usr/bin/env python

"""
Command line interface to pgf2img module.
"""

import os
import sys
from getopt import getopt

from pgf2img import pgf2img, default_template, default_density

# Usage statement:
usage = """PGF2IMG 1.0 - Copyright 2010 by Lev Givon
Usage: %s [options] <input file> [output file]
Convert a PGF/TikZ file directly into a cropped image.

Options:
   -h                     Print usage statement.
   -t <template file>     Use specified LaTeX file as template.
   -d <density>           Specify DPI of output file.

Notes:
   * Default output file name is the same as the basename of the input
     file with an extension of .png.
   * Default density is %s DPI.
""" % (os.path.basename(sys.argv[0]),default_density)

template = default_template
density = default_density
    
# Retrieve the arguments:
optlist, args = getopt(sys.argv[1:],'ht:d:')

# Print the usage statement if no input files were specified:
if len(args) < 1:
    print usage
    sys.exit()

# Process the arguments:
for opt in optlist:

    # Print usage statement:
    if opt[0] == '-h':
        print usage
        sys.exit(0)
        
    # Try to read the specified template file:
    if opt[0] == '-t':
        try:
            f = open(opt[1],'r')
        except IOError:
            print 'error opening template file %s' % opt[1]
            sys.exit(1)
        else:
            data = f.readlines()
            template = ''.join(data)
            f.close()

    # Set the density
    if opt[0] == '-d':
        try:
            temp = float(opt[1])
        except ValueError:
            print 'density must be an integer value'
            sys.exit(1)
        else:
            density = temp

# Check whether the template contains the string <>:
if template.find('<>') == -1:
    print 'invalid template'
    exit(1)
    
# Set up input and output file names:
input_filename = args[0]
output_ext = '.png'
output_basename = os.path.splitext(os.path.realpath(input_filename))[0]
output_filename = output_basename + output_ext
if len(args) > 1:
    output_filename = os.path.realpath(args[1])
    output_basename,output_ext = os.path.splitext(output_filename)

# Convert the input file:
pgf2img(input_filename, output_filename, template, density)

